// ‰∫§ÊòìÊü•ËØ¢ÂäüËÉΩÊºîÁ§∫ËÑöÊú¨
// Ëøô‰∏™ËÑöÊú¨Â±ïÁ§∫‰∫ÜÂ¶Ç‰Ωï‰ΩøÁî®ethers.jsÊü•ËØ¢‰∫§Êòì‰ø°ÊÅØ

import { ethers } from 'ethers'

// Á§∫‰æã‰∫§ÊòìÂìàÂ∏åÔºà‰ª•Â§™Âùä‰∏ªÁΩë‰∏äÁöÑÁúüÂÆû‰∫§ÊòìÔºâ
const EXAMPLE_TX_HASH = '0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b'

/**
 * Êü•ËØ¢‰∫§Êòì‰ø°ÊÅØÁöÑÂÆåÊï¥Á§∫‰æã
 * @param {string} txHash - ‰∫§ÊòìÂìàÂ∏å
 * @param {string} rpcUrl - RPCËäÇÁÇπURL
 */
async function queryTransaction(txHash, rpcUrl = 'https://eth.llamarpc.com') {
  try {
    console.log('üîç ÂºÄÂßãÊü•ËØ¢‰∫§Êòì:', txHash)
    
    // ÂàõÂª∫provider
    const provider = new ethers.JsonRpcProvider(rpcUrl)
    
    // È™åËØÅ‰∫§ÊòìÂìàÂ∏åÊ†ºÂºè
    if (!/^0x([A-Fa-f0-9]{64})$/.test(txHash)) {
      throw new Error('Êó†ÊïàÁöÑ‰∫§ÊòìÂìàÂ∏åÊ†ºÂºè')
    }
    
    console.log('‚úÖ ‰∫§ÊòìÂìàÂ∏åÊ†ºÂºèÈ™åËØÅÈÄöËøá')
    
    // Ëé∑Âèñ‰∫§ÊòìÊî∂ÊçÆ
    console.log('üìã Ëé∑Âèñ‰∫§ÊòìÊî∂ÊçÆ...')
    const receipt = await provider.getTransactionReceipt(txHash)
    if (!receipt) {
      throw new Error('‰∫§Êòì‰∏çÂ≠òÂú®ÊàñÂ∞öÊú™Ë¢´ÊâìÂåÖ')
    }
    
    // Ëé∑Âèñ‰∫§ÊòìËØ¶ÊÉÖ
    console.log('üìÑ Ëé∑Âèñ‰∫§ÊòìËØ¶ÊÉÖ...')
    const tx = await provider.getTransaction(txHash)
    if (!tx) {
      throw new Error('Êó†Ê≥ïËé∑Âèñ‰∫§ÊòìËØ¶ÊÉÖ')
    }
    
    // Ëé∑ÂèñÂå∫Âùó‰ø°ÊÅØ
    console.log('üì¶ Ëé∑ÂèñÂå∫Âùó‰ø°ÊÅØ...')
    const block = await provider.getBlock(receipt.blockNumber)
    
    // Ê†ºÂºèÂåñ‰∫§ÊòìÊï∞ÊçÆ
    const transactionData = {
      hash: tx.hash,
      from: tx.from,
      to: tx.to || 'ÂêàÁ∫¶Ë∞ÉÁî®',
      value: ethers.formatEther(tx.value),
      gasPrice: ethers.formatUnits(tx.gasPrice || 0, 'gwei'),
      gasLimit: tx.gasLimit?.toString() || '0',
      nonce: tx.nonce,
      data: tx.data,
      blockNumber: receipt.blockNumber,
      blockHash: receipt.blockHash,
      timestamp: block?.timestamp || 0,
      confirmations: receipt.confirmations,
      status: receipt.status === 1 ? 'ÊàêÂäü' : 'Â§±Ë¥•'
    }
    
    console.log('üéâ ‰∫§ÊòìÊü•ËØ¢ÊàêÂäü!')
    console.log('üìä ‰∫§ÊòìËØ¶ÊÉÖ:')
    console.log(JSON.stringify(transactionData, null, 2))
    
    return transactionData
    
  } catch (error) {
    console.error('‚ùå Êü•ËØ¢Â§±Ë¥•:', error.message)
    throw error
  }
}

/**
 * ÊâπÈáèÊü•ËØ¢Â§ö‰∏™‰∫§Êòì
 * @param {string[]} txHashes - ‰∫§ÊòìÂìàÂ∏åÊï∞ÁªÑ
 */
async function batchQueryTransactions(txHashes) {
  console.log('üöÄ ÂºÄÂßãÊâπÈáèÊü•ËØ¢‰∫§Êòì...')
  
  const results = []
  const errors = []
  
  for (const txHash of txHashes) {
    try {
      const result = await queryTransaction(txHash)
      results.push({ hash: txHash, success: true, data: result })
    } catch (error) {
      errors.push({ hash: txHash, success: false, error: error.message })
    }
  }
  
  console.log('üìà ÊâπÈáèÊü•ËØ¢ÂÆåÊàê:')
  console.log(`‚úÖ ÊàêÂäü: ${results.length} ‰∏™`)
  console.log(`‚ùå Â§±Ë¥•: ${errors.length} ‰∏™`)
  
  return { results, errors }
}

/**
 * È™åËØÅ‰∫§ÊòìÂìàÂ∏åÊ†ºÂºè
 * @param {string} txHash - ‰∫§ÊòìÂìàÂ∏å
 */
function validateTransactionHash(txHash) {
  const pattern = /^0x([A-Fa-f0-9]{64})$/
  return pattern.test(txHash)
}

/**
 * Ê†ºÂºèÂåñ‰∫§ÊòìÈáëÈ¢ù
 * @param {string} value - WeiÊ†ºÂºèÁöÑÈáëÈ¢ù
 * @param {number} decimals - Â∞èÊï∞‰ΩçÊï∞
 */
function formatTransactionValue(value, decimals = 6) {
  const ethValue = ethers.formatEther(value)
  return parseFloat(ethValue).toFixed(decimals)
}

// ‰ΩøÁî®Á§∫‰æã
if (typeof window !== 'undefined') {
  // ÊµèËßàÂô®ÁéØÂ¢É
  window.queryTransaction = queryTransaction
  window.batchQueryTransactions = batchQueryTransactions
  window.validateTransactionHash = validateTransactionHash
  window.formatTransactionValue = formatTransactionValue
} else {
  // Node.jsÁéØÂ¢É
  console.log('üìù ‰∫§ÊòìÊü•ËØ¢ÂäüËÉΩÊºîÁ§∫')
  console.log('Á§∫‰æã‰∫§ÊòìÂìàÂ∏å:', EXAMPLE_TX_HASH)
  
  // ËøêË°åÁ§∫‰æãÊü•ËØ¢
  queryTransaction(EXAMPLE_TX_HASH)
    .then(data => {
      console.log('‚úÖ ÊºîÁ§∫ÂÆåÊàê')
    })
    .catch(error => {
      console.log('‚ùå ÊºîÁ§∫Â§±Ë¥•:', error.message)
    })
}

export {
  queryTransaction,
  batchQueryTransactions,
  validateTransactionHash,
  formatTransactionValue,
  EXAMPLE_TX_HASH
}
